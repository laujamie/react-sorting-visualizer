{"version":3,"sources":["components/SortingAlgorithms/BubbleSort/BubbleSort.tsx","components/SortingAlgorithms/QuickSort/QuickSort.tsx","components/SortingVisualizer/SortingVisualizer.tsx","components/SortingAlgorithms/InsertionSort/InsertionSort.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["bubbleSortHelp","arr","animations","n","length","i","swapped","j","push","quickSortHelp","low","high","p_index","pivot","last","prev","temp","partition","SortingVisualizer","useState","setArr","resetArray","useCallback","min","max","BARS","document","getElementsByClassName","res","Math","floor","random","style","backgroundColor","useEffect","Fragment","className","map","x","id","key","height","onClick","tempArray","slice","bubbleSortAnimations","CHANGECOLOR","barOneId","barTwoId","barOneStyles","barTwoStyles","col","setTimeout","sort","quickSortAnimations","pivotColored","insertionSortAnimations","barStyles","App","props","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2a712160.chunk.js","sourcesContent":["export const bubbleSortAnimations = (arr: number[]): number[][] => {\n  let animations: number[][] = [];\n  if (arr.length < 1) {\n    return animations;\n  }\n  const tempArray = arr.slice();\n  bubbleSortHelp(tempArray, animations);\n  return animations;\n};\n\nconst bubbleSortHelp = (arr: number[], animations: number[][]) => {\n  let n = arr.length;\n  for (let i = 0; i < n; i++) {\n    let swapped = false;\n    for (let j = 1; j < n - i; j++) {\n      // push these two as the number we are comparing\n      animations.push([j - 1, j]);\n      if (arr[j - 1] > arr[j]) {\n        [arr[j - 1], arr[j]] = [arr[j], arr[j - 1]];\n        animations.push([j, j - 1]);\n        swapped = true;\n      } else {\n        animations.push([j - 1, j]);\n      }\n      animations.push([j - 1, j]);\n    }\n    if (!swapped) break;\n  }\n};\n","export const quickSortAnimations = (arr: number[]): number[][] => {\n  if (arr.length <= 1) {\n    return [];\n  }\n  const animations: number[][] = [];\n  quickSortHelp(arr, 0, arr.length - 1, animations);\n  return animations;\n};\n\nconst partition = (\n  arr: number[],\n  low: number,\n  high: number,\n  animations: number[][]\n): number => {\n  let pivot = arr[high];\n  animations.push([high]); // Add pivot selection as an animation\n  let last = low;\n  for (let i = low; i < high; i++) {\n    let swapped = false;\n    let prev = [last, i];\n    animations.push(prev); // Change color of last and element i\n    if (arr[i] < pivot) {\n      [arr[last], arr[i]] = [arr[i], arr[last]];\n      last++;\n      swapped = true;\n    }\n    let temp = swapped ? [i, last - 1] : [last, i];\n    animations.push(temp); // Swapped or not\n    animations.push(prev); // Reset colors\n  }\n  [arr[last], arr[high]] = [arr[high], arr[last]];\n  animations.push([high]); // Reset color of the pivot after partitioning\n  animations.push([last, high]); // change color of pivot\n  animations.push([high, last]); // swap pivot with high\n  animations.push([last, high]); // reset pivot color\n  return last;\n};\n\nconst quickSortHelp = (\n  arr: number[],\n  low: number,\n  high: number,\n  animations: number[][]\n) => {\n  if (low >= high) return;\n  let p_index = partition(arr, low, high, animations);\n\n  quickSortHelp(arr, low, p_index - 1, animations);\n  quickSortHelp(arr, p_index + 1, high, animations);\n};\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport \"./SortingVisualizer.scss\";\n\nimport {\n  bubbleSortAnimations,\n  quickSortAnimations,\n  insertionSortAnimations\n} from \"../SortingAlgorithms/SortingAlgorithms\";\n\nconst SortingVisualizer: React.FC = () => {\n  let numVals = 101;\n  const LOWER_VAL = 5;\n  const UPPER_VAL = 550;\n  const ANIM_LENGTH = 20;\n\n  const PRIMARY_COLOR = \"#ffbe31\";\n  const SECONDARY_COLOR = \"#3172ff\";\n  const PIVOT_COLOR = \"#ff5631\";\n  const COMPLETED_COLOR = \"#72ff31\";\n  const [arr, setArr] = useState<number[]>([]);\n\n  const getRandomArbitrary = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  const bubbleSort = (): void => {\n    const animations = bubbleSortAnimations(arr);\n    for (let i = 0; i < animations.length; i++) {\n      const CHANGECOLOR = i % 3 !== 1;\n      const BARS = document.getElementsByClassName(\"bar\") as HTMLCollectionOf<\n        HTMLElement\n      >;\n      if (CHANGECOLOR) {\n        const [barOneId, barTwoId] = animations[i];\n        const barOneStyles = BARS[barOneId].style;\n        const barTwoStyles = BARS[barTwoId].style;\n        const col = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyles.backgroundColor = col;\n          barTwoStyles.backgroundColor = col;\n        }, i * ANIM_LENGTH);\n      } else {\n        const [barOneId, barTwoId] = animations[i];\n        const barOneStyles = BARS[barOneId].style;\n        const barTwoStyles = BARS[barTwoId].style;\n        setTimeout(() => {\n          if (barOneId > barTwoId) {\n            [barOneStyles.height, barTwoStyles.height] = [\n              barTwoStyles.height,\n              barOneStyles.height\n            ];\n          }\n        }, i * ANIM_LENGTH);\n      }\n    }\n    setTimeout(() => {\n      setArr(arr.sort());\n      const BARS = document.getElementsByClassName(\"bar\") as HTMLCollectionOf<\n        HTMLElement\n      >;\n      for (let i = 0; i < BARS.length; i++) {\n        BARS[i].style.backgroundColor = COMPLETED_COLOR;\n      }\n    }, animations.length * ANIM_LENGTH);\n  };\n\n  const quickSort = () => {\n    const animations = quickSortAnimations(arr);\n    let pivotColored = false;\n    let j = 0;\n    for (let i = 0; i < animations.length; i++) {\n      const BARS = document.getElementsByClassName(\"bar\") as HTMLCollectionOf<\n        HTMLElement\n      >;\n      if (animations[i].length === 1) {\n        const col = pivotColored ? PRIMARY_COLOR : PIVOT_COLOR;\n        pivotColored = !pivotColored;\n        const [id] = animations[i];\n        setTimeout(() => {\n          BARS[id].style.backgroundColor = col;\n        }, i * ANIM_LENGTH);\n        continue;\n      }\n      const [barOneId, barTwoId] = animations[i];\n      const CHANGECOLOR = j % 3 !== 1;\n      if (CHANGECOLOR) {\n        // When swapping the pivot, we differentiate the color\n        const col =\n          j % 3 === 0\n            ? pivotColored\n              ? SECONDARY_COLOR\n              : PIVOT_COLOR\n            : PRIMARY_COLOR;\n        const barOneStyles = BARS[barOneId].style;\n        const barTwoStyles = BARS[barTwoId].style;\n        setTimeout(() => {\n          barOneStyles.backgroundColor = col;\n          barTwoStyles.backgroundColor = col;\n        }, i * ANIM_LENGTH);\n      } else if (barOneId > barTwoId) {\n        const barOneStyles = BARS[barOneId].style;\n        const barTwoStyles = BARS[barTwoId].style;\n        setTimeout(() => {\n          [barOneStyles.height, barTwoStyles.height] = [\n            barTwoStyles.height,\n            barOneStyles.height\n          ];\n        }, i * ANIM_LENGTH);\n      }\n      j++;\n    }\n    setTimeout(() => {\n      const BARS = document.getElementsByClassName(\"bar\") as HTMLCollectionOf<\n        HTMLElement\n      >;\n      for (let i = 0; i < BARS.length; i++) {\n        BARS[i].style.backgroundColor = COMPLETED_COLOR;\n      }\n      setArr(arr.sort());\n    }, animations.length * ANIM_LENGTH);\n  };\n\n  const insertionSort = () => {\n    const animations = insertionSortAnimations(arr);\n\n    for (let i = 0; i < animations.length; i++) {\n      const BARS = document.getElementsByClassName(\"bar\") as HTMLCollectionOf<\n        HTMLElement\n      >;\n      const CHANGECOLOR = i % 3 !== 1;\n      if (CHANGECOLOR) {\n        const id = animations[i][0];\n        const barStyles = BARS[id].style;\n        const col = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barStyles.backgroundColor = col;\n        }, i * ANIM_LENGTH);\n      } else {\n        const [barOneId, barTwoId] = animations[i];\n        const barOneStyles = BARS[barOneId].style;\n        const barTwoStyles = BARS[barTwoId].style;\n        setTimeout(() => {\n          [barOneStyles.height, barTwoStyles.height] = [\n            barTwoStyles.height,\n            barOneStyles.height\n          ];\n        }, i * ANIM_LENGTH);\n      }\n    }\n  };\n\n  const resetArray = useCallback(() => {\n    const BARS = document.getElementsByClassName(\"bar\") as HTMLCollectionOf<\n      HTMLElement\n    >;\n    let res: number[] = [];\n    for (let i: number = 1; i < numVals; i++) {\n      let j = getRandomArbitrary(LOWER_VAL, UPPER_VAL);\n      res.push(j);\n    }\n    setArr(res);\n    for (let i = 0; i < BARS.length; i++) {\n      BARS[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n  }, [setArr, numVals, LOWER_VAL, UPPER_VAL]);\n\n  useEffect(() => {\n    resetArray();\n  }, [resetArray]);\n\n  return (\n    <React.Fragment>\n      <div className=\"sorting-visualizer\">\n        {arr.map((x: number, id) => {\n          return (\n            <div\n              className=\"bar\"\n              key={id}\n              style={{\n                height: `${(x / UPPER_VAL) * 90}vh`,\n                backgroundColor: PRIMARY_COLOR\n              }}\n            ></div>\n          );\n        })}\n      </div>\n      <button onClick={resetArray}>Reset</button>\n      <button onClick={bubbleSort}>Bubble Sort</button>\n      <button onClick={quickSort}>Quick Sort</button>\n      <button onClick={insertionSort}>Insertion Sort</button>\n    </React.Fragment>\n  );\n};\n\nexport default SortingVisualizer;\n","export const insertionSortAnimations = (arr: number[]): number[][] => {\n  let animations: number[][] = [];\n  for (let i = 1; i < arr.length; i++) {\n    let temp = arr[i];\n    let j = i - 1;\n    while (j >= 0 && temp < arr[j]) {\n      animations.push([j, j + 1]); // highlight the two bars\n      animations.push([j + 1, j]); // swap\n      animations.push([j, j + 1]); // reset\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = temp;\n  }\n  return animations;\n};\n","import React from \"react\";\nimport SortingVisualizer from \"./components/SortingVisualizer/SortingVisualizer\";\nimport \"./App.scss\";\n\nconst App: React.FC = props => {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}